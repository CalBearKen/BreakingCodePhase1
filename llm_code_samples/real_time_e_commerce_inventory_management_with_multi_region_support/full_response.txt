Creating a full-fledged e-commerce platform with the outlined requirements is a substantial undertaking, far beyond what can be delivered in a simple text format. However, I'll create a series of example files to illustrate the foundational structure of this system.

### 1. Backend - Node.js Service

#### `server.js`
```javascript
// Filename: server.js
const express = require('express');
const mongoose = require('mongoose');
const { ApolloServer } = require('apollo-server-express');
const typeDefs = require('./graphql/schema');
const resolvers = require('./graphql/resolvers');
const OAuth2Server = require('node-oauth2-server');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 4000;

// Setup OAuth 2.0
app.oauth = new OAuth2Server({
  model: require('./oauthModel'),
});

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log("Connected to MongoDB");
}).catch(err => console.error('MongoDB connection error:', err));

// Setup Apollo GraphQL Server
const server = new ApolloServer({ typeDefs, resolvers });
server.start().then(res => {
  server.applyMiddleware({ app });

  app.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}${server.graphqlPath}`);
  });
}).catch(err => console.error('GraphQL Server error:', err));
```

### 2. GraphQL Schema

#### `graphql/schema.js`
```javascript
// Filename: graphql/schema.js
const { gql } = require('apollo-server-express');

module.exports = gql`
  type Product {
    id: ID!
    name: String!
    description: String
    price: Float!
    stock: Int!
  }

  type Query {
    getProducts: [Product]
  }

  type Mutation {
    updateProductStock(id: ID!, stock: Int!): Product
  }
`;
```

### 3. GraphQL Resolvers

#### `graphql/resolvers.js`
```javascript
// Filename: graphql/resolvers.js
const Product = require('../models/Product');

const resolvers = {
  Query: {
    getProducts: async () => {
      try {
        return await Product.find({});
      } catch (error) {
        throw new Error('Error fetching products:', error);
      }
    },
  },
  Mutation: {
    updateProductStock: async (_, { id, stock }) => {
      try {
        return await Product.findByIdAndUpdate(id, { stock }, { new: true });
      } catch (error) {
        throw new Error('Error updating product stock:', error);
      }
    },
  },
};

module.exports = resolvers;
```

### 4. MongoDB Model for Products

#### `models/Product.js`
```javascript
// Filename: models/Product.js
const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
  },
  description: String,
  price: {
    type: Number,
    required: true,
  },
  stock: {
    type: Number,
    required: true,
  },
});

module.exports = mongoose.model('Product', productSchema);
```

### 5. OAuth Model

#### `oauthModel.js`
```javascript
// Filename: oauthModel.js
module.exports = {
  getAccessToken: function(bearerToken) {
    // Fetch token from database
  },
  getClient: function(clientId, clientSecret) {
    // Fetch client from database
  },
  saveToken: function(token, client, user) {
    // Save token to database
  },
  getUser: function(username, password) {
    // Validate user here
  }
}
```

### Setup & Installation 

1. **Environment Setup**:
   - Create a `.env` file with the necessary environment variables.
   - MongoDB URI (`MONGODB_URI`)
   - OAuth credentials, Stripe keys, and any other necessary configurations.

2. **Installation**:
   - Run `npm install` to install all necessary packages. You will need to set up dependencies like `express`, `mongoose`, `apollo-server-express`, `node-oauth2-server`, `dotenv`, etc.

3. **Run the Server**:
   - Use `node server.js` or equivalent to start the server.

### Note:

- The above code only provides a structural foundation focusing on Node.js and GraphQL with MongoDB. Implementing features like AWS Kinesis Streams, DynamoDB integrations, Elasticsearch, Kafka for event streaming, Stripe payments, Kubernetes deployments, monitoring, etc., involves additional code and configuration, which requires extensive resources beyond text-based communication.
- This demonstration covers basic models and schema. Dependencies like Kafka consumers/producers, Elasticsearch schemas, DynamoDB Streams, and other features need to be integrated into this system as per the specific system requirements and business logic.
- Ensure you have MongoDB instance and AWS-related infrastructure set up correctly.

This provides a basic starting point for your application. Each described piece—Stripe integration, Kafka streaming, AWS deployments—would need its integrations into this skeleton.