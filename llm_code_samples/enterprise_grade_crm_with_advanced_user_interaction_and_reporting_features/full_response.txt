Implementing a full-fledged CRM platform requires multiple components and is too large to fully write out in a single response. However, I can provide you with a structured scaffold for a basic implementation that you could extend. Below you will find the skeleton of a CRM platform with Ruby on Rails for the backend, React for the frontend, and MySQL as the database. This includes sample implementations for customer profiles, WebSockets for real-time messaging, email integration, and data importing.

### Backend Setup

#### 1. `Gemfile` - Dependencies for the Ruby on Rails Backend
```ruby
# Gemfile

source 'https://rubygems.org'

ruby '2.7.3'

gem 'rails', '~> 6.1.4'
gem 'mysql2', '>= 0.4.4'
gem 'puma', '~> 5.0'
gem 'websocket-rails'
gem 'sendgrid-ruby'
gem 'devise'
gem 'omniauth-google-oauth2'
gem 'jasper-rails'
gem 'aws-sdk-s3'

# development and test
group :development, :test do
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
  gem 'dotenv-rails'
end

# Execute `bundle install` to set up your dependencies
```

#### 2. `config/routes.rb` - Example Routes
```ruby
# config/routes.rb

Rails.application.routes.draw do
  devise_for :users, controllers: { omniauth_callbacks: 'users/omniauth_callbacks' }
  
  resources :customers do
    collection { post :import }
  end

  resources :messages, only: [:create]

  namespace :reports do
    get 'generate', to: 'reports#generate'
  end

  root to: 'home#index'
end
```

#### 3. `app/models/customer.rb` - Customer Model
```ruby
# app/models/customer.rb

class Customer < ApplicationRecord
  validates :name, :email, presence: true
end
```

#### 4. `app/controllers/customers_controller.rb` - Customers Controller
```ruby
# app/controllers/customers_controller.rb

class CustomersController < ApplicationController
  before_action :authenticate_user!

  def index
    @customers = Customer.all
    render json: @customers
  end

  def create
    @customer = Customer.new(customer_params)
    
    if @customer.save
      render json: @customer, status: :created
    else
      render json: @customer.errors, status: :unprocessable_entity
    end
  end

  def import
    file = params[:file]
    if file.content_type == 'text/csv'
      CSV.foreach(file.path, headers: true) do |row|
        Customer.create! row.to_hash
      end
    elsif file.content_type == 'application/json'
      JSON.parse(file.read).each do |item|
        Customer.create! item
      end
    end

    head :ok
  end

  private

  def customer_params
    params.require(:customer).permit(:name, :email)
  end
end
```

### Frontend Setup

#### 5. `src/components/CustomerList.js` - React Customer List Component
```javascript
// src/components/CustomerList.js

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { ActionCableProvider, ActionCableConsumer } from 'react-actioncable-provider';

const CustomerList = () => {
  const [customers, setCustomers] = useState([]);
  const [message, setMessage] = useState('');

  useEffect(() => {
    axios.get('/customers').then(response => setCustomers(response.data));
  }, []);

  const handleReceivedMessage = (response) => {
    setMessage(response.message);
  };

  return (
    <ActionCableProvider>
      <h1>Customers</h1>
      <ul>
        {customers.map(customer => <li key={customer.id}>{customer.name} - {customer.email}</li>)}
      </ul>

      <ActionCableConsumer
        channel={{ channel: 'MessagesChannel' }}
        onReceived={handleReceivedMessage}
      />
      
      <div>{message}</div>
    </ActionCableProvider>
  );
};

export default CustomerList;
```

This is a very high-level overview with initial setup instructions and some basic code scaffolding. Real implementations would involve further setting up of WebSockets, OAuth, Jasper reports, and the integration with SendGrid. Such detailed features are typically coded in multiple steps with careful setup and configuration files on both the backend and frontend.

To secure and deploy this application, you'd finish implementing the features using `Ansible` for deployment, setting up AWS for data storage or any other service configuration. You would then extend each model and controller for additional CRM functionalities and final testing.