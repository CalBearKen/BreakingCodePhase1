Creating a fully functional IoT device management system as you requested within this environment is not feasible due to the complexity and integration required across various platforms and services. However, I can provide a simplified scaffold of the code that represents the structure required for such a system. You'll need to adjust paths, configurations, and integrate the system according to your working environment and deployment specifics.

Here's an implementation outline and corresponding code files:

### Implementation Outline:
1. **Flask Backend**: For device registration and status monitoring.
2. **Angular Frontend**: For displaying real-time data and analytics.
3. **MQTT Broker**: Using Mosquitto for device communication.
4. **PostgreSQL Database**: For storing devices, data logs, and events.
5. **AWS Services**: Including Elastic Beanstalk for deployment, Kinesis for data ingestion, Lambda for processing, CloudTrail for logging, and X-Ray for monitoring.

### 1. Flask Application (`app.py`)
```python
# app.py
from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
import jwt
import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://username:password@localhost:5432/iot_db'
db = SQLAlchemy(app)

class Device(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), unique=True, nullable=False)
    registered_on = db.Column(db.DateTime, default=datetime.datetime.utcnow)

class DataLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.Integer, db.ForeignKey('device.id'), nullable=False)
    data = db.Column(db.String(500), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.datetime.utcnow)

@app.route('/register-device', methods=['POST'])
def register_device():
    name = request.json.get('name')
    device = Device.query.filter_by(name=name).first()
    if not device:
        device = Device(name=name)
        db.session.add(device)
        db.session.commit()
    return jsonify({"id": device.id, "name": device.name})

@app.route('/token', methods=['POST'])
def get_token():
    device_id = request.json.get('device_id')
    token = jwt.encode({'device_id': device_id, 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=1)}, 'secret_key', algorithm='HS256')
    return jsonify({'token': token})

if __name__ == '__main__':
    app.run(debug=True)
```

### 2. Angular Frontend (`app.component.ts` and `app.module.ts`)
```typescript
// app.component.ts
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-root',
  template: `<div *ngFor="let device of devices">
                <h3>{{ device.name }}</h3>
                <button (click)="fetchData(device.id)">Fetch Data</button>
                <div *ngFor="let log of logs[device.id]">
                  <p>{{ log.data }}</p>
                </div>
             </div>`,
})
export class AppComponent implements OnInit {
  devices = [];
  logs = {};

  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.http.get('/api/devices').subscribe((data: any) => this.devices = data);
  }

  fetchData(deviceId) {
    this.http.get(`/api/devices/${deviceId}/logs`).subscribe((data: any) => this.logs[deviceId] = data);
  }
}

// app.module.ts
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

### 3. PostgreSQL Schema (`schema.sql`)
```sql
-- schema.sql
CREATE TABLE device (
    id SERIAL PRIMARY KEY,
    name VARCHAR(80) UNIQUE NOT NULL,
    registered_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE data_log (
    id SERIAL PRIMARY KEY,
    device_id INT REFERENCES device(id),
    data VARCHAR(500) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### 4. Mosquitto Configuration (`mosquitto.conf`)
```conf
# mosquitto.conf
listener 1883
allow_anonymous true
```

### 5. AWS Lambda Function (`lambda_function.py`)
```python
# lambda_function.py
import json
import boto3
from botocore.exceptions import ClientError

def lambda_handler(event, context):
    try:
        processed_data = process_data(event['data'])
        store_data_in_kinesis(processed_data)
        return {
            'statusCode': 200,
            'body': json.dumps('Data processed successfully')
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps('Error processing data')
        }

def process_data(data):
    # Placeholder for data processing logic
    return data

def store_data_in_kinesis(data):
    client = boto3.client('kinesis', region_name='us-west-2')
    client.put_record(
        StreamName='IoTStream',
        Data=json.dumps(data),
        PartitionKey='device_id'
    )
```

### Final Notes:
This scaffold outlines the components you've requested. You need to set up your environment, ensure all services are running, configure AWS correctly, and adapt paths and settings for your environment. Each part of this scaffold can be expanded with further functionality as needed in a production setup.