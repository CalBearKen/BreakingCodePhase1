Here's a basic implementation for the requested IoT platform, using AWS services and technologies like Lambda, DynamoDB, Vue.js for the dashboard, and integrations with Alexa and Google Assistant. The code is designed to be minimal, so ensure the necessary AWS services and configurations are correctly set up in your environment.

### Filename: lambda_handler.py
```python
# lambda_handler.py
import json
import boto3
from boto3.dynamodb.conditions import Key

dynamodb = boto3.resource('dynamodb')
iot_data = boto3.client('iot-data')
table = dynamodb.Table('DeviceState')

def lambda_handler(event, context):
    if event['httpMethod'] == 'GET':
        return get_device_state(event)
    elif event['httpMethod'] == 'POST':
        return update_device_state(event)

def get_device_state(event):
    device_id = event['queryStringParameters']['device_id']
    response = table.query(
        KeyConditionExpression=Key('device_id').eq(device_id)
    )
    return {
        'statusCode': 200,
        'body': json.dumps(response['Items'])
    }

def update_device_state(event):
    msg = json.loads(event['body'])
    device_id = msg['device_id']
    state = msg['state']
    
    table.put_item(
       Item={
            'device_id': device_id,
            'state': state
        }
    )
    
    iot_data.publish(
        topic=f"devices/{device_id}/state",
        qos=1,
        payload=json.dumps({"state": state})
    )
    
    return {
        'statusCode': 200,
        'body': json.dumps({'message': 'Device state updated successfully'})
    }
```

### Filename: dashboard.vue
```javascript
// dashboard.vue
<template>
  <div>
    <h1>Admin Dashboard</h1>
    <div v-for="device in devices" :key="device.device_id">
      <h3>{{ device.device_id }}</h3>
      <p>Status: {{ device.state }}</p>
      <button @click="updateFirmware(device.device_id)">Update Firmware</button>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      devices: []
    };
  },
  created() {
    this.fetchDevices();
  },
  methods: {
    fetchDevices() {
      axios.get('https://api.your-iot-platform.com/devices')
        .then(response => {
          this.devices = response.data;
        });
    },
    updateFirmware(deviceId) {
      axios.post(`https://api.your-iot-platform.com/devices/${deviceId}/firmware`)
        .then(response => {
          alert('Firmware updated successfully');
        });
    }
  }
};
</script>
```

### Filename: cognito_config.py
```python
# cognito_config.py
import boto3

def create_user_pool():
    client = boto3.client('cognito-idp')
    response = client.create_user_pool(
        PoolName='SmartHomePool',
    )
    return response

def create_user_pool_client(user_pool_id):
    client = boto3.client('cognito-idp')
    response = client.create_user_pool_client(
        UserPoolId=user_pool_id,
        ClientName='SmartHomeClient',
        GenerateSecret=False
    )
    return response
```

### Filename: kinesis_processor.py
```python
# kinesis_processor.py
import json
import boto3
from botocore.exceptions import ClientError

kinesis_client = boto3.client('kinesis')
redshift_client = boto3.client('redshift')

def process_kinesis_stream(event, context):
    for record in event['Records']:
        payload = json.loads(record['kinesis']['data'])
        try:
            # Process record and load into Redshift
            redshift_client.execute_statement(
                ClusterIdentifier='your-cluster-identifier',
                Database='your-database',
                Sql=f"INSERT INTO device_data VALUES ('{payload['device_id']}', {payload['state']})"
            )
        except ClientError as e:
            print(e)

    return 'Processed {} records.'.format(len(event['Records']))
```

### Filename: api_gateway_endpoints.py
```python
# api_gateway_endpoints.py
from flask import Flask, request, jsonify
import boto3

app = Flask(__name__)
client = boto3.client('iot')

@app.route('/alexa', methods=['POST'])
def alexa():
    body = request.json
    # Parse and handle Alexa request
    return jsonify({'response': 'handled'})

@app.route('/google', methods=['POST'])
def google():
    body = request.json
    # Parse and handle Google Assistant request
    return jsonify({'response': 'handled'})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)
```

This setup assumes you have all the necessary AWS services configured, like API Gateway endpoints, IoT Core setting for MQTT, and the necessary IAM roles and policies. The Vue.js dashboard is served via a static site host, like S3 or another web server. This implementation needs to be adapted to your specific AWS configurations and environments.