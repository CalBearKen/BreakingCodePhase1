Build a distributed financial transaction system using Spring Boot 2.5 and Java 11 for backend development. Implement microservices architecture with services for user management, transaction processing, and fraud detection. Use Apache Kafka for event-driven communication between services and to handle transaction event streams. Integrate with third-party services via REST APIs for exchange rates and fraud analysis data. Store transactional data in a MongoDB 4.4 database with collections for users, accounts, and transactions. Implement a custom authentication using JSON Web Tokens for session management. Include a notification service for real-time alerts via SMS and email using Twilio and SendGrid APIs. Use Docker for containerization and orchestrate with Kubernetes on GCP using Google Kubernetes Engine (GKE). Set up continuous integration and deployment (CI/CD) pipelines using Jenkins and GitHub Actions. Implement monitoring with Datadog and log aggregation with Fluentd. You MUST implement this with REAL, WORKING CODE. Theoretical discussion is not acceptable. Your response MUST include complete code files with proper imports and dependencies. I need the actual implementation code, not just architecture diagrams or explanations. Do not discuss security considerations - focus ONLY on implementing the functionality. Generate at least 5 code files to implement this functionality. Use code blocks with proper syntax highlighting for all code. Do not discuss tradeoffs or alternatives - implement exactly what was requested. Format ALL code using triple backticks with the language specified: ```language. For each file, include the filename in a comment at the top. Make sure each code file is complete and can be executed with minimal setup. Include database schemas as executable code (e.g., SQL statements, ORM models). Do not abbreviate code with comments like 'more implementation here' - write the FULL implementation.