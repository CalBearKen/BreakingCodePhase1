Creating a comprehensive healthcare data management system with Django, Vue.js, Kafka, MySQL, and Kubernetes is a large-scale project that typically requires a lot of code, infrastructure, and time. In a single response, it isn't feasible to cover every aspect with fully working code across all these technologies, especially with the constraints of this format and size limitations. However, I can certainly provide a basic, yet comprehensive starting point for such a project by outlining the core pieces of code.

Let's break it down into necessary parts. I'll provide code for the main Django application models and views, Kafka producer setup, Vue.js frontend setup file, and Helm chart for deployment, while also hinting at OAuth setup and monitoring tools.

### 1. Django Project Setup and Models: `models.py`

```python
# models.py
from django.db import models
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    ROLES = (
        ('administrator', 'Administrator'),
        ('doctor', 'Doctor'),
        ('staff', 'Staff'),
    )
    role = models.CharField(max_length=20, choices=ROLES)

class Patient(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    dob = models.DateField()
    address = models.TextField()
    phone = models.CharField(max_length=15)

class Appointment(models.Model):
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    doctor = models.ForeignKey(User, limit_choices_to={'role': 'doctor'}, on_delete=models.CASCADE)
    date = models.DateTimeField()
    description = models.TextField()

class MedicalHistory(models.Model):
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    record = models.TextField()
    created_on = models.DateTimeField(auto_now_add=True)
```

### 2. Django Views: `views.py`

```python
# views.py
from django.shortcuts import render, get_object_or_404
from django.http import JsonResponse
from .models import Appointment, Patient, MedicalHistory

def appointments_list(request):
    appointments = Appointment.objects.all()
    return JsonResponse({'appointments': list(appointments.values())})

def patient_detail(request, pk):
    patient = get_object_or_404(Patient, pk=pk)
    medical_history = MedicalHistory.objects.filter(patient=patient)
    return JsonResponse({
        'patient': {
            'first_name': patient.first_name,
            'last_name': patient.last_name,
        },
        'medical_history': list(medical_history.values())
    })
```

### 3. Kafka Producer: `kafka_producer.py`

```python
# kafka_producer.py
from kafka import KafkaProducer
import json

# Initialize Kafka Producer
producer = KafkaProducer(
    bootstrap_servers='localhost:9092',
    value_serializer=lambda v: json.dumps(v).encode('utf-8')
)

def send_appointment_notification(appointment_data):
    producer.send('appointment_notifications', appointment_data)
    producer.flush()
```

### 4. Vue.js Setup: `app.js`

```javascript
// app.js
import Vue from 'vue';
import App from './App.vue';
import Chart from 'chart.js';

Vue.config.productionTip = false;

new Vue({
  render: h => h(App),
}).$mount('#app');

// Sample usage of Chart.js
new Chart(document.getElementById('myChart'), {
  type: 'bar',
  data: {
    labels: ['January', 'February', 'March'],
    datasets: [{
      label: 'Appointment Count',
      data: [10, 15, 12],
      backgroundColor: [
        'rgba(255, 99, 132, 0.2)',
        'rgba(54, 162, 235, 0.2)',
        'rgba(255, 206, 86, 0.2)'
      ],
      borderColor: [
        'rgba(255,99,132,1)',
        'rgba(54, 162, 235, 1)',
        'rgba(255, 206, 86, 1)'
      ],
      borderWidth: 1
    }]
  },
  options: {
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
});
```

### 5. Helm Chart for Deployment: `Chart.yaml`

```yaml
# Chart.yaml
apiVersion: v2
name: healthcare-system
description: A helm chart for Kubernetes
version: 0.1.0

# requirements can be added here as needed
dependencies: []
```

### 6. Helm Kubernetes Deployment YAML: `deployment.yaml`

```yaml
# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: healthcare-system
spec:
  replicas: 3
  selector:
    matchLabels:
      app: healthcare-system
  template:
    metadata:
      labels:
        app: healthcare-system
    spec:
      containers:
        - name: healthcare-system
          image: myregistry/healthcare-system:latest
          ports:
            - containerPort: 8000
```

### Notes for Full Implementation
- **EHR Synchronization**: Implementing EHR synchronization would require specific API details of the EHR provider, which should be connected using Django `requests` or similar packages with periodic syncing strategies.
- **OAuth2 Authentication**: Generally set up using `django-allauth` or `djangorestframework-simplejwt` and configuration with Google Identity services.
- **Logging and Monitoring**: ELK and Prometheus would require further configuration files such as `logstash.yaml` for specifying log paths or Prometheus metrics exports in a dedicated monitoring pod configuration.

Considering the scale of the request, these snippets provide a robust starting point and need extensive further development and configuration to reach a fully-fledged system.