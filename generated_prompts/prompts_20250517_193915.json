[
    {
        "title": "Real-Time E-Commerce Inventory Management with Multi-Region Support",
        "prompt": "Develop a comprehensive e-commerce platform focused on inventory management with real-time updates. Use Node.js for backend services (version 16), React for frontend (version 17), and MongoDB as the NoSQL database. The system should integrate payment processing via Stripe and handle inventory updates across multiple geographical regions with AWS DynamoDB Streams for real-time synchronization. Implement OAuth 2.0 for user authentication and incorporate a GraphQL API to enable flexible querying from the frontend. Data pipelines with Apache Kafka should manage product update events, flowing into an Elasticsearch cluster for search capabilities. Deploy microservices using Kubernetes with Helm charts on AWS EKS, ensuring auto-scaling and load balancing, and set up monitoring with Prometheus and Grafana dashboards. Essential code structure requirements: ```language with specified filename and comprehensive error handling throughout the codebase."
    },
    {
        "title": "Complex Healthcare System with Sensitive Data Processing and HIPAA Compliance Simulations",
        "prompt": "Build a healthcare management platform using Python Flask (version 2.x) for backend APIs, securing patient data workflows with PostgreSQL for persistent storage. Integrate with external lab services using HL7 messages over REST APIs and implement an ETL pipeline using Apache NiFi for lab results processing. Employ OpenID Connect for SSO, incorporate role-based access control (RBAC) with a detailed role hierarchy, and construct a JSON-based API schema for secure interactions. Utilize RabbitMQ for task scheduling of data processing jobs and configure your deployment using Terraform scripts on Google Cloud Platform, considering a multi-region setup for failover scenarios. Code must include sections handling webhook notifications and provide a custom file parser for HL7 formatted files. All configurations and code to be provided in executable form with specified files."
    },
    {
        "title": "IoT Device Management and Data Collection System for Smart Homes",
        "prompt": "Design an IoT platform using AWS Lambda with Python for managing smart home devices connected via MQTT protocol. Implement a NoSQL database using AWS DynamoDB to store device states and history logs. The system must include an Admin dashboard built with Vue.js, allowing remote configuration and update of device firmware. Integration endpoints with Alexa and Google Assistant should be provided using AWS API Gateway. Implement a user authentication mechanism using Cognito for device access. A data processing pipeline using AWS Kinesis should handle streaming device data into a Redshift data warehouse for analytics. Network configurations, including security groups and IAM roles, should be detailed. Provide code using the specified formatting and ensure all functionality can be deployed with minimal setup."
    },
    {
        "title": "Financial Transactions Processing Application with Blockchain Account Verification",
        "prompt": "Create a financial transactions processing application using Java Spring Boot (version 2.6) with a PostgreSQL database to log transaction details. Implement integration with external banks\u2019 APIs using secure OAuth 2.0 flows and verify transactions using a private Ethereum blockchain smart contract for account validation. Manage user authentication and permissions using custom JWT tokens and incorporate Kafka for reliable transaction event streaming. Use Redis for caching real-time transactions and ensure microservices are containerized and orchestrated with Docker and Kubernetes on Azure AKS. Provide detailed error handling, comprehensive API documentation generated with Swagger, and maintain compliance with financial transaction auditing requirements via detailed logging using ELK stack. Code must include examples of all transaction states and blockchain interaction code configured in executable files."
    },
    {
        "title": "Enterprise-Grade CRM with Advanced User Interaction and Reporting Features",
        "prompt": "Develop a CRM platform employing Ruby on Rails (version 6) for the backend, React (version 18) for the frontend, and MySQL as the relational database. Implement CRM functionalities that include dynamic customer profiles, real-time messaging through WebSockets, email integration via SendGrid API, and external data import features supporting CSV and JSON formats. Utilize a third-party OAuth provider for authentication and Google Analytics for user behavior tracking. Implement a detailed reporting mechanism using JasperReports integrated with AWS RDS for generating complex PDF reports. Deploy services using Ansible scripts on-premises and provide detailed API endpoints with parameter specifications for extending CRM functionalities. Code must deliver full implementations for customer management workflows and advanced report generation, formatted appropriately, ensuring all components are deployable with provided setup instructions."
    }
]